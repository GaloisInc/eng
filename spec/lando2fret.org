Conversion from Lando to FRET:

* Purpose

  * Converts a Lando specification into FRET JSON for import into the FRET tool.

** Justification

*** FRET databases

    FRET operates from a set of internal databases (CouchDB).  These databases
    are stored in the user's home directory area, and are locked by a running
    instance of FRET.  This configuration and operation essentially precludes the
    ability to share databases and coordinate between multiple people.  There
    is also no "history" or easy ability to "try out" different approaches.

    FRET does have the ability to export and import the information in the
    database, but it's a multi-step process that is not especially easy to use,
    and the import process does not merge remote and local changes, so again, it
    does not support joint development activities.

    What is desired is a methodology that supports joint development and the use
    of a VCS (Version Control System, e.g. git) to track changes.

*** Variable references

    FRET viability analysis will group requirements into different connected
    components (CC's) and provide Compositional analysis of each CC.  The CC
    grouping is determined by the set of variables referenced in the FRETish
    "responses" portion.

    Often times it is useful to use a symbolic reference to a state rather than a
    numeric reference.  For example, the frettish statement ~In driving upon
    brakes the Car shall immediately satisfy stopping.~ is much more easily read
    than ~In car_state = 2 upon brakes the Car shall immediately satisfy
    car_state = 7.~ because the latter requires remembering all the ~car_state~
    values.  It is possible to use ~Mode~ variables or ~Internal~ variables to
    provide the ~driving~ and ~stopping~ equations, but that will generate
    invalid Lustre for viability analysis because there's no reference to
    ~car_state~ in the Frettish itself and so it is "undefined" for Lustre.

** Approach

    Lando provides a good basis for providing the FRETish specifications in a
    manner that resolves the above concerns:
      * Lando is a text document that can be maintained in a VCS;
      * The history and merging of changes is easily understood and accomplished
        via a human (or automated means).
      * The natural elements in a Lando specification are very similar to the
        elements that a FRETish statement will reference.
      * Lando allows for the specification of extra information associated with
        the elements, providing the description and usage information for the
        elements in the FRETish specification (i.e. the domain model and data
        dictionary).

    Thus, this document describes the functionality of tooling that will
    recognize specific Lando syntax and export that syntax to a FRET JSON file in
    a format that can be directly imported into FRET and used for FRET
    operations.  It may still be helpful to use FRET to develop the FRETish
    statements (as it provides much more online guidance to the process), but the
    resulting should then be replicated in the Lando document as the original
    source.

* Syntax for FRET in Lando

  * The top-level Lando ~system~ or ~subsystem~ will be the FRET Project

  * The current Lando ~subsystem~ will be the parent for a FRET Requirement.

  * A Lando ~requirement~ with an ~index~ of FRET specifies a FRET Requirement in
    FRETish that will be extracted.

    #+begin_example
    requirement This is the first requirement (REQ-1)
    This is the human-readable statement of the requirement.
    It is a paragraph of one or more lines, ultimately ending with a blank line.
    If the car is being driven applying the brakes will begin stopping the car.

      indexing
        FRET: In driving upon brakes the Car shall immediately satisfy stopping.
        FRET: In stopping & brakes, the Car shall eventually satisfy stopped.

    #+end_example

    Note that the above specified two FRET requirement statements for the single
    general requirement.  A Lando ~requirement~ may have multiple ~FRET:~
    statements, and there may be multiple Lando ~requirements~.

  * The abbrevName or first word of the ~requirement~ name will be used as the
    FRET requirement ID.  If there are multiple ~FRET:~ statements for a
    requirement, subsequent ~FRET:~ statements will be numbered with ~-N~
    suffixes to the ID. The first is assumed to be the parent requirement for the
    subsequent FRET statements [KWQ: TODO add parent reference].

  * The explanation of the ~requirement~ will be used as the FRET justification
    text.

  * A FRET ~events~ with an event entry that matches a FRET variable name will
    automatically be declared as a Fret Input boolean variable.  There is no
    association betwen the different events that is imposed or expected.

  * A FRET ~scenarios~ with a one-word word followed by the word "Values" will be
    assumed to describe the (mutually-exclusive) state values for a state.

    FRET is used to specify transition systems, so the assumption is that the
    input state and output state will be separate variables.  Thus, this tool
    will create a pair of automatic FRET integer state variables (one "Input"
    variable for the initial state, and one "Output" variable for the final
    state).

    The scenario names can be reference in FRETish statements, and this Lando
    extraction will generate an ~Internal~ variable for the integer value of each
    named scenario.

    #+begin_example
    scenarios car_state Values

    stopped
    The car is not moving.

    driving
    The car is currently moving and being driven.

    accelerating
    The car is currently moving and increasing speed.

    stopping
    The car is currently moving and decreasing speed.

    #+end_example

    The FRETish statement can simply refer to the scenario value and the
    exported FRETish to declare their equality to the initial or final state
    variable, depending on where they appear (the scope or condition v.s. the
    responses).  If the corresponding section alreaqdy references the associated
    state variable, the exported FRETish is unchange.

    For example, the following statement would be passed to FRET unchanged:
    #+begin_example
    In (car_state = stopping) & brakes,
    the Car shall at the next timepoint satisfy (car_state_final = stopped).
    #+end_example

    but the following statement would automatically be converted to the one above before being exported:
    #+begin_example
    > In stopping & brakes, the Car shall at the next timepoint satisfy stopped.
    #+end_example

  * General fret variables (i.e. those not auto-generated via an "events" or
    "scenarios" Lando specification) are indicated by a Lando ~component~, where
    the variable name is the Lando ~abbrevName~ or first word of the name.

    * Usage :: The FRET use of variable is specified by a component constraint
      ~FRET <USAGE> var.~ where ~USAGE~ is one of: ~Input~, ~Output~, ~Mode~,
      ~Function~, ~Internal~. Only ~Input~ and ~Output~ are recommended.

    * Type :: The type of the variable is specified by a component constraint
      ~FRET : <TYPE>.~ where supported FRET data types are: ~boolean~, ~integer~,
      ~unsigned integer~, ~single~, ~double~.

    #+begin_example
    component The brakes for the car (brakes)
    This is a variable that indicates when the brakes are being applied.

    FRET Input var.
    FRET: boolean.
    Stop the car!
    
    #+end_example

* Usage

To use the ~eng~ tool to convert a Lando file into a FRET requirements JSON
import file, it is first necessary to define the Lando spec for the ~eng~
~system~ command and specify a ~fret~ format output file.  Example project
~_eng_/specs.eng~ file:

  #+begin_example
  system =
    spec =
      car =
        name = Requirements specification for a Car
        file = specs/car.lando
        format = lando
        generate =
          specs/car.md =
            format = markdown
          specs/car-fret.json =
            format = fret
  #+end_example

Run ~$ eng help system~ for more information on creating the above.

Once configured in this manner, the ~eng~ ~system~ commands can be used:

  #+begin_example#
  $ eng system list
  Known system specifications:
    [lando] car: Requirements specification for a Car
  $ eng system gen car
  % Wrote lando spec "car" to markdown file specs/car.md
  % Wrote lando spec "car" to fret file car_fret.json
  #+end_example#

* Sample FRETish statements

** Change of state

   #+begin_example
   FSM_Autopilot shall always satisfy
   if (state = ap_standby_state & !standby & !apfail)
   then STATE = ap_transition_state
   #+end_example

   # condition: "null"
   # post_condition: "((wet & awake) => noise = croaking)"
   # CoCoSpecCpde: "H(((wet and awake) => (noise = croaking)))"

   This is the example from FRET itself, although it is somewhat awkwardly
   phrased: the CONDITIONS under which this applies are specified as part of the
   RESPONSES.

   * This phrasing also uses STATE instead of state_final for the result, so the
     states cannot be indicated by a Lando "satisfies" and must instead be
     defined via explicit "component" specifications.

   * The scenarios methodology will also attempt to find references to the state
     variable itself in the SCOPE+CONDITIONS and RESPONSES and supply the
     equality phrases as needed.  As specified above, this will not be possible.

   The recommended way of stating this FRET requirement is:

   #+begin_example
   Upon ap_standby_state & !standby & !apfail
   the FSM_Autopilot shall always satisfy ap_transition_state
   #+end_example

   # Upon wet & awake the frog shall always satisfy noise = croaking

   # condition: "regular"
   # qualifier_word: "upon"
   # pre_condition: "(wet & awake)"
   # regular_condition: "(wet & awake)"
   # post_condition: "(noise = croaking)"
   # CoCoSpecCode: "H((H(not ((wet and awake))) or (noise = croaking)))"


   #+begin_example
   In ap_standby_state mode upon !standby & !apfail
   the FSM_Autopilot shall always satisfy ap_transition_state
   #+end_example

   # CoCoSpecCode: "(H(((not (awake) and YtoPre(awake))
   #                    => YtoPre(SI((awake and ZtoPre(not (awake))),
   #                                 (SI((awake and ZtoPre(not (awake))),
   #                                     not (wet)) or (noise = croaking))))))
   #                and (SI((awake and ZtoPre(not (awake))),
   #                        not ((not (awake) and YtoPre(awake))))
   #                     => SI((awake and ZtoPre(not (awake))),
   #                           (SI((awake and ZtoPre(not (awake))),
   #                               not (wet)) or (noise = croaking)))))"

* Differences between FRET and eng validation

 The FRET tool will convert FRETish requirements and associated variables into
 kind2 contracts that are embedded in Lustre to perform realization checking of
 those FRETish requirements using kind2 plus an SMT solver (e.g. z3).

 The eng tool can generate a JSON file that can be imported into FRET for this
 purpose, or it can alternatively generate the kind2 input directly.  The former
 is useful when initially developing the FRETish statements since the
 highlighting and semantics help of the FRET tool provide useful feedback.
 However, the eng-to-kind2 methodology is capable of generating more efficient
 and extensible kind2 input and is the preferred methodology once the initial
 FRETish exploration has occurred.

 Those differences are documented below.

** Value referencing

 If there is a state machine to be described, there is typically a variable
 containing the state and then several state values.  Those values are typically
 specified as ~Integer~ values, either directly by using the numeric value:

 #+begin_example
 upon state_var = 3 the X shall immediately satisfy ...
 #+end_example

 Or by creating an ~Internal~ ~Integer~ variable for each state value:

 #+begin_example
 Internal Integer "running" is: 3
 #+end_example

 #+begin_example
 upon state_var = running the X shall immediately satisfy ...
 #+end_example

 The Lando specification would suggest using the following definition for the
 state machine variable and associated values:

 #+begin_example
 scenarios state_var Values

   disabled
   The off state (usually the initial state).

   starting
   In the process of being started.

   stopping
   In the process of being shut-down.

   running
   Enabled and active.
 #+end_example

 When specified in this manner, only the *value names* need to be referenced in
 the FRETish specified in the Lando file; the values are automatically assigned,
 and the reference to the state variable is automatically supplied (both in
 export to FRET-importable JSON or to kind2 validation).

 #+begin_example
 upon state_var = running the X shall immediately satisfy ...
 #+end_example

 This is a convenience that allows more compact FRETish statements to be
 specified (hopefully improving readability/understandability).

** Value enums

  As described above, state variable values can be specified with a ~scenarios~
  Lando specification which references the value *names*, with the actual values
  being auto-generated by ~eng~.

  When exported to ~JSON~ for import by the ~FRET~ tool, these values will be
  ~integer~ values, because that is the only type (other than ~boolean~ or
  ~float~, neither of which are appropriate for state values).  In this mode,
  ~Internal~ ~Integer~ ~FRET~ variables will automatically be declared for the
  values.

  There are two disadvantages to this representation, however:

  1. When realizability fails, the traces provide the state variable values as
     integers, which requires the engineer to mentally translate from integers to
     the corresponding value names, interfering with the understandability of the
     trace.

  2. When provided to ~kind2~ and/or the SMT checker, an ~integer~ value can
     actually take on a very wide range of values (~MININT..MAXINT~), even though
     the actual number of states is concrete and very small.  These constraints
     are not available to ~kind2~ and the SMT solver, so a large range of
     "impossible" values must be considered by the latter during realizability
     checks.

  Instead, when ~eng~ is used to directly generate the ~kind2~ input, it will
  define enumeration types for the set of values that each state variable can
  assume.  This resolves both of the above disadvantages: enumeration names are
  provided in traces, and ~kind2~ and the SMT solver are aware of the valid and
  small range of values the state variable is allowed to assume.  This makes
  traces much more easily understood, and also greatly improves the performance
  of realizability checking.

** Input/output minimization

*** Background

  The collection of FRETish requirements that the user creates will be grouped
  into "connected components" (CC) by the tool.  A CC is defined by the Venn
  overlap of output variables associated with the FRETish statement (generally,
  variables mentioned in the ~Timing~ or ~Response~ sections of the FRETish
  statement; FRETish statements that don't overlap in output variables are
  unrelated and can be assigned to separate CC's.  Performing ~kind2~
  realizability checks on a per-CC basis can be more efficient because only the
  subset of requirements in the CC must be checked as opposed to *all*
  requirements.

  It is not always possible to separate the requirements into multiple CC's, in
  which case ~FRET will perform a "Monolithic" analysis of the requirements
  (v.s. "Compositional").  The ~FRET~ user can select a Monolithic analysis as an
  override of the Compositional mode if they desire.  The ~eng~ tool does not
  allow an override to "Monolithic" output and always generates one file per CC.

  _NOTE_: The ~FRET~ use of the terms "Monolithic" and "Compositional" are
  different than the ~kind2~ use of these terms; in ~kind2~, "compositional"
  analysis refers to the manner in which sub-nodes are checked.

  When ~FRET~ (or ~eng~) generates ~kind2~ input, a separate file is generated
  for *each* CC and ~kind2~ is invoked separately on each file.  For convenience
  sake, discussions throughout this document will refer to a "CC" even if there
  is only one monolithic component.

*** Difference

  When ~FRET~ generates the ~kind2~ input, the *all* FRET-defined variables are
  specified as input and output variables to the contract node.

  The ~eng~ tool generation of ~kind2~ input will specify *only* the input and
  output variables reference by the CC's contracts.  This makes the contract
  specification cleaner and *may* result in more efficient realizability checking
  by ~kind2~ and the ~SMT~ solver because unused variables don't increase the
  search state space unnecessarily.

** Consolidated delay node specification

  The generated kind2/Lustre may need to contain "delayed" values (values which
  only express after a number of timepoints).  The ~FRET~-generated kind2 input
  will contain a number of different delay nodes, differentiated by the time
  period of their delay.  The ~eng~-generated kind2 input uses a single
  specification that uses an input value to determine the associated delay to
  use.  This is mostly an internal change, although it may affect the display of
  trace values.

** Minimization of counter-examples

  When a CC is found to be unrealizable, ~FRET~ will iteratively call ~kind2~
  with various combinations of the requirements in the unrealizable CC to attempt
  to find the minimal set of requirements that will still be unrealizable.  The
  ~eng~-driven ~kind2~ invocation does not do this: it will simply display the
  main trace for any unrealizable CC, including all conflicting realizability
  contracts; however, note that ~kind2~ will indicate the subset of guarantees
  that have a conflict, so it is anticipated that the ~eng~-provided output will
  be roughly as concise as the ~FRET~-provided output, and will take much less
  time to produce.

  ~FRET~ also provides a more elaborate graph of conflicting requirements that
  aids in visualization and selection of the conflicting traces (there may be
  separate conflicts in a single CC).

** Version of kind2

  ~FRET~ is oriented towards v2.1 of ~kind2~; ~eng~ has been updated to support
  v2.3 of ~kind2~.  There are some small differences in the behavior and output
  of ~kind2~ associated with the new version.

** kind2 contract specification

  The ~FRET~ generation of kind2 input uses imported nodes to provide the
  specification:

  #+begin_example
  node imported foo(inp1: integer; inp2: boolean) returns (out1: integer)
  (*@contract

    (* FRETish... *)
    var req1 = ...Lustre form of FRETish...;

    (* FRETish... *)
    var req1 = ...Lustre form of FRETish...;

    guarantee req1;
    guarantee req2;
  *)
  #+end_example

  In this "imported" node syntax, there is no node body allowed and only the
  contracts are checked by kind2.

  In the ~eng~ generation of kind2 input, the ~contract~ form is used instead of
  ~node imported~.  This requires that the ~contract~ is imported by a separate
  node (which ~eng~ also generates).

  #+begin_example
  contract fooSPEC(inp1: integer; inp2: boolean) returns (out1: integer)
  let

    (* FRETish... *)
    var req1 = ...Lustre form of FRETish...;

    (* FRETish... *)
    var req1 = ...Lustre form of FRETish...;

    guarantee req1;
    guarantee req2;
  tel

  node foo(inp1: integer; ; inp2: boolean) returns (out1: integer)
  (*@contract
    import fooSPEC(inp1, inp2) returns (out1);
  *)
  let
    --% MAIN;
  tel
  #+end_example

  This specification mechanism is more flexible (see other differences/features
  below).

* EQIL format

The EQIL format is a very simple key/value configuration specification format
(EQIL = EQuals Information Language):

 * All specifications are of the form "key = value".  Any line containing an
   equals sign will be identified as a key on the left of the equals and a value
   on the right of the equals (only the first equals sign on a line is
   significant).

 * Indentation of keys is significant: keys can be nested via indentation.

 * Keys can be multiple words with any characters except an '=' character,
   although they are limited to a single line.

 * Values can have any characters and extend across multiple lines until the next
   key at the same indentation level (although trailing blank lines are trimmed).

Those are the four main rules.  There are some clarifications:

 * The EQIL reader is flexible and does not impose a specific
   validation/interpretation on the file contents; this is left to the
   application.  For example:

   #+begin_example
   key1 = value1
   key2 =
     key3 = value3
     key4 = This is value #4.
   #+end_example

   In this example, the following keys and values are available to the
   application:

     | key  | value                    |
     |------+--------------------------|
     | key1 | value1                   |
     |------+--------------------------|
     | key2 | key3 = value3            |
     |      | key4 = This is value #4. |
     |------+--------------------------|
     | key3 | value3                   |
     |------+--------------------------|
     | key4 | This is value #4.        |
     |------+--------------------------|

  * A line that is indented at the same level as a previous key but without an
    equals sign is treated as an implicit key; the value for that key is any
    subsequent lines that are indented at a level greater than that implicit key
    line.

  * The key may be blank.  In this case, the ~eng~ tool will update the file to
    assign numerically increasing keys built from the parent key.

    #+begin_example
    topkey =
      = value 1
      = value 2
    #+end_example

    Is rewritten to become:

    #+begin_example
    topkey =
      topkey1 = value 1
      topkey2 = value 2
    #+end_example

    It is expected that EQIL files are kept under version control and that the
    user can accept (commit) or reject (restore the original) the effects of
    these modifications to the EQIL file.

  * Normalization.  If the file is re-written, EQIL will generally retain the
    original file contents, but there will be some changes:

    * values for identical keys will be merge.
    * All equal signs separating keys and values will be surrounded by a space.
    * Implicit keys will have an explicit equals sign.

    Sometimes the combination of the above rules will cause unintended changes to
    values.  To mitigate against this, see the ~Block values~ section below.

    Note that if EQIL files are not rewritten, normalization is not a concern.

* Details

    sections =

      implicit keys =

        One design point to consider is whether implicit keys should be allowed.
        In other words, is this:

            foo
              bar
                cow = moo

        the same as this:

            foo =
              bar =
                cow = moo

        While that may seem like an obvious example, what about:

            baz =
               This is the first line of the foo value, and
                 this is the second line, but is the line above an implicit key?
               This is the point being considered by this design topic.

        There are two routes: (1) disallow implicit keys, or (2) comprehensively
        implement implicit keys, which means the answer to the baz question above
        is "yes".

        By disallowing implicit keys, the syntax becomes much more regular, and
        the reader is not left wondering, "if I only need indentation, then why
        do I need = characters?"

        By comprehensively supporting implicit keys, eqil parsing more fully
        supports the "DWIM" aspect of the specification, with the cost being the
        presence of additional--perhaps unintended--keys and values.  However,
        the latter is already the case with parsing even without implicit keys,
        and the goal of this parser (unlike other parsers) is to express a
        superset of the possible set of information that the application itself
        will be interested in.  The additional keys are not visible to the user
        as long as the application is careful about what it looks for, and may
        require a bit of care in the application design of that key structure.
        For example:

           foo
             bar
               user-specified-key
                 help = Some help information
               The foo.bar can be used to process foo information
                 in the context of bar.
             moo = cow

        Here, if the application is looking for foo.bar.X keys to process, it may
        inadvertently pick up the first sentence of the descriptive paragraph as
        a key.  It may also be surprised that the above also defines:

            eqil([key(0, "foo"), key(2, "bar"),
                  key(4, "The foo.bar can be used to process foo information"),
                  key(6, "in the context of bar.")
                 ], [])

        In fact, in this mode, the only lines from the input file that do *not*
        get expressed as keys are value lines that are exactly aligned with the
        value line preceeding them.

* Block values

  Normal syntax is "key = value", and value may be on multiple lines.  The other
  way of looking at this is that any line with an = sign has a key to the left
  and value to the right.  This does require stating a couple of rules around the
  presence of an = sign:

  1. Only the first = sign on a line is significant; remaining = signs on a line
     are simply part of the value.

  2. Subsequent value lines containing an = sign are *also* candidates as
     sub-key/value entries; EQIL does not decide that one or the other must be
     valid, but instead supports querying either the upper-level key where the
     value block includes the lines that would be considered as sub-keys, or
     querying the sub-key and only getting the sub-value.  "Beauty is in the eye
     of the beholder" in this case.

  3. Subsequent value lines that are followed by lines with more indentation are
     implicit keys.  Again, the client application can retrieve the entire block
     via a higher level key, or the indented value from the implicit key.

  For example, given the input:

  #+begin_example
  foo
    farm =
      cow = moo=says hello
      pig
        = grunt
        = oink
  foo =
    farm =
      chicken = cluck
      info =
        A chicken is an animal (chicken=animal) but not all
        animals are chickens, so we cannot say = for animal
        and chicken.
  #+end_example

  The client code can retrieve any or all of the following:

    | key                                    | value                                                    |
    |----------------------------------------+----------------------------------------------------------|
    | foo                                    | .farm =                                                  |
    |                                        | .  cow = moo=says hello                                  |
    |                                        | .  pig                                                   |
    |                                        | .    = grunt                                             |
    |                                        | .    = oink                                              |
    |----------------------------------------+----------------------------------------------------------|
    | foo > farm                             | .cow = moo=says hello                                    |
    |                                        | .pig                                                     |
    |                                        | .  = grunt                                               |
    |                                        | .  = oink                                                |
    |----------------------------------------+----------------------------------------------------------|
    | foo > farm > cow                       | moo=says hello                                           |
    |----------------------------------------+----------------------------------------------------------|
    | foo > farm > pig                       | .= grunt                                                 |
    |                                        | .= oink                                                  |
    |----------------------------------------+----------------------------------------------------------|
    | foo > farm > pig >                     | grunt                                                    |
    |----------------------------------------+----------------------------------------------------------|
    | foo > farm > pig >                     | oink                                                     |
    |----------------------------------------+----------------------------------------------------------|
    | foo                                    | .farm =                                                  |
    |                                        | .  chicken = cluck                                       |
    |                                        | .  info =                                                |
    |                                        | .    A chicken is an animal (chicken=animal) but not all |
    |                                        | .    animals are chickens, so we cannot say = for animal |
    |                                        | .    and chicken.                                        |
    |----------------------------------------+----------------------------------------------------------|
    | foo > farm                             | .chicken = cluck                                         |
    |                                        | .info =                                                  |
    |                                        | .  A chicken is an animal (chicken=animal) but not all   |
    |                                        | .  animals are chickens, so we cannot say = for animal   |
    |                                        | .  and chicken.                                          |
    |----------------------------------------+----------------------------------------------------------|
    | foo > farm > chicken                   | cluck                                                    |
    |----------------------------------------+----------------------------------------------------------|
    | foo > farm > info                      | A chicken is an animal (chicken=animal) but not all      |
    |                                        | animals are chickens, so we cannot say = for animal      |
    |                                        | and chicken.                                             |
    |----------------------------------------+----------------------------------------------------------|
    | foo > farm > info >                    | animal) but not all                                      |
    | A chicken is an animal (chicken        |                                                          |
    |----------------------------------------+----------------------------------------------------------|
    | foo > farm > info >                    | for animal                                               |
    | animals are chickens, so we cannot say |                                                          |
    |----------------------------------------+----------------------------------------------------------|
    | foo > farm > info > and chicken.       |                                                          |
    |----------------------------------------+----------------------------------------------------------|

    * Note: in the table above, (leading periods are for indentation purposes and
      are not actually part of the value.  The '>' is used to show the separation
      of the keys provided for the lookup and are not part of the syntax.

    No doubt the last three entries in the table are probably surprising.

** Normalizing

  EQIL can be normalized, which has two effects and a side-effect:

   * Effect 1 :: blank keys are assigned values,
   * Effect 2 :: identically-keyed values are concatenated.

   * Side-effect :: If either of the above two effects is performed, then any
     higher-level key/values are *removed* because it cannot reliable change the
     value portion of those keys to match the changes caused by the two main
     effects.

  If the input EQIL is not expected to change, and the client knows that it will
  not attempt to access any of the higher-level removed keys, then the normalized
  form can be consumed directly.

  To demonstrate, if the above example were normalized, the possible key/value
  lookups would be as shown here (note that the higher-level keys are gone and
  only the leaf elements are present):

    | changed | key                                    | value                                               |
    |---------+----------------------------------------+-----------------------------------------------------|
    | no      | foo > farm > cow                       | moo=says hello                                      |
    |---------+----------------------------------------+-----------------------------------------------------|
    | yes     | foo > farm > pig > pig1                | grunt                                               |
    |---------+----------------------------------------+-----------------------------------------------------|
    | yes     | foo > farm > pig > pig2                | oink                                                |
    |---------+----------------------------------------+-----------------------------------------------------|
    | no      | foo > farm > chicken                   | cluck                                               |
    |---------+----------------------------------------+-----------------------------------------------------|
    |         | foo > farm > info                      | A chicken is an animal (chicken=animal) but not all |
    | no      |                                        | animals are chickens, so we cannot say = for animal |
    |         |                                        | and chicken.                                        |
    |---------+----------------------------------------+-----------------------------------------------------|
    |         | foo > farm > info >                    | animal) but not all                                 |
    | no      | A chicken is an animal (chicken        |                                                     |
    |---------+----------------------------------------+-----------------------------------------------------|
    | no      | foo > farm > info >                    | for animal                                          |
    |         | animals are chickens, so we cannot say |                                                     |
    |---------+----------------------------------------+-----------------------------------------------------|
    | no      | foo > farm > info > and chicken.       |                                                     |
    |---------+----------------------------------------+-----------------------------------------------------|

  [It's also possible for the client application to skip normalization: again,
  this is based on the needs of the client, not any form of strictness in the
  EQIL parser.]

  However, if the above post-normalization conditions are not true: EQIL files
  are expected to change over time, or higher-level keys might be used
  post-normalization, then it is recommended that the client rewrite (via
  eqil_emit) the configuration file into the normalized form and then re-parse
  it.  This will ensure that the file matches the client's processing, and
  re-generate the higher-level key values.

** Emitting EQIL

  Emitting EQIL is the process of converting parsed EQIL back into string form,
  usually for writing back out to a file.

  It is *strongly* recommended that the EQIL be normalized prior to emission.

  When EQIL files are emitted, the concern about the = sign as part of values and
  the interpretation of "sub-keys" becomes more significant:

  1. The keys and values are emitted with a space on either side of the = sign
     for readability.  This means that the *first* equals sign on *any* line will
     have spaces around it when emitted.

  2. Keys cannot have values and sub-keys.  While this can be parsed, on
     emitting, the "value" portion is dropped if a key also has sub-keys.

  3. Keys are *always* followed by an = sign when emitted.  This means that
     implicit sub-keys will have = signs added to the end of the line.

  To mitigate against any unintended effects from issue #1 and #3, there is a
  special value representation called a "valblock".  A valblock is indicated by
  supplying a vertical bar ('|') (only) on the key line.  Everything following
  that line that is indented more than the key will be treated as a value only,
  and never as a sub-key (i.e. a "value block" or "block value").  If the key
  line's value is not a single vertical bar, or if the vertical bar appears in
  any other location, it is simply treated as a character and does not indicate a
  valblock.
    
  For example, given the previous input with a single change to add the vertical
  bar for the info key:
  
  #+begin_example
  foo
    farm =
      cow = moo=says hello
      pig
        = grunt
        = oink
  foo =
    farm =
      chicken = cluck
      info = |
        A chicken is an animal (chicken=animal) but not all
        animals are chickens, so we cannot say = for animal
        and chicken.
  #+end_example

  The client code can retrieve the same results as the table shown above except
  the (surprising) last three lines are no longer available: info has no
  sub-keys.

    | key                                    | value                                                    |
    |----------------------------------------+----------------------------------------------------------|
    | foo                                    | .farm =                                                  |
    |                                        | .  cow = moo=says hello                                  |
    |                                        | .  pig                                                   |
    |                                        | .    = grunt                                             |
    |                                        | .    = oink                                              |
    |----------------------------------------+----------------------------------------------------------|
    | foo > farm                             | .cow = moo=says hello                                    |
    |                                        | .pig                                                     |
    |                                        | .  = grunt                                               |
    |                                        | .  = oink                                                |
    |----------------------------------------+----------------------------------------------------------|
    | foo > farm > cow                       | moo=says hello                                           |
    |----------------------------------------+----------------------------------------------------------|
    | foo > farm > pig                       | .= grunt                                                 |
    |                                        | .= oink                                                  |
    |----------------------------------------+----------------------------------------------------------|
    | foo > farm > pig >                     | grunt                                                    |
    |----------------------------------------+----------------------------------------------------------|
    | foo > farm > pig >                     | oink                                                     |
    |----------------------------------------+----------------------------------------------------------|
    | foo                                    | .farm =                                                  |
    |                                        | .  chicken = cluck                                       |
    |                                        | .  info =                                                |
    |                                        | .    A chicken is an animal (chicken=animal) but not all |
    |                                        | .    animals are chickens, so we cannot say = for animal |
    |                                        | .    and chicken.                                        |
    |----------------------------------------+----------------------------------------------------------|
    | foo > farm                             | .chicken = cluck                                         |
    |                                        | .info =                                                  |
    |                                        | .  A chicken is an animal (chicken=animal) but not all   |
    |                                        | .  animals are chickens, so we cannot say = for animal   |
    |                                        | .  and chicken.                                          |
    |----------------------------------------+----------------------------------------------------------|
    | foo > farm > chicken                   | cluck                                                    |
    |----------------------------------------+----------------------------------------------------------|
    | foo > farm > info                      | A chicken is an animal (chicken=animal) but not all      |
    |                                        | animals are chickens, so we cannot say = for animal      |
    |                                        | and chicken.                                             |
    |----------------------------------------+----------------------------------------------------------|

  If the original example (without the valblock indicator for the info key) is
  written out, the result will convert "... (chicken=animal) ..." to
  "... (chicken = animal) ...", and also convert the last info line from "and
  chicken." to "and chicken. =", which is clearly different that the original.
  The valblock indication prevents these modifications to pure value sections.

:- begin_tests(frettish).
:- use_module("frettish").
:- use_module(library(strings)).

test(state_change, [nondet]) :-
    Inp = "frog shall always satisfy if (wet & awake) then (noise = croaking)",
    parse_fret("test", Inp,
               fretment(scope_info(SFret, SVars),
                                  condition_info(CFret, CVars),
                                  component_info(Comp),
                                  timing_info(Timing),
                                  response_info(Responses, RespVars))),
    get_dict(scope, SFret, Scope),
    get_dict(type, Scope, SType),
    assertion(SType == null),
    assertion(SVars == []),
    get_dict(condition, CFret, Condition),
    assertion(Condition == "null"),
    assertion(CVars == []),
    get_dict(component_name, Comp, CompName),
    assertion(CompName == "frog"),
    get_dict(timing, Timing, Tmng),
    assertion(Tmng == "always"),
    get_dict(response, Responses, Rspns),
    get_dict(post_condition, Responses, PostCond),
    assertion(Rspns == "satisfaction"),
    assertion(PostCond == "(((wet & awake)) => ((noise = croaking)))"),
    assertion(RespVars == [ "wet", "awake", "noise", "croaking" ]).

test(stage_change_natural, [nondet]) :-
    Inp = "Upon wet & awake the frog shall always satisfy (noise = croaking)",
    parse_fret("test", Inp,
               fretment(scope_info(SFret, SVars),
                                  condition_info(CFret, CVars),
                                  component_info(Comp),
                                  timing_info(Timing),
                                  response_info(Responses, RespVars))),
    get_dict(scope, SFret, Scope),
    get_dict(type, Scope, SType),
    assertion(SType == null),
    assertion(SVars == []),
    get_dict(condition, CFret, Condition),
    get_dict(qualifier_word, CFret, Qualifier),
    get_dict(pre_condition, CFret, PreCond),
    get_dict(regular_condition, CFret, RegCond),
    assertion(Condition == "regular"),
    assertion(Qualifier == "upon"),
    assertion(PreCond == "(wet & awake)"),
    assertion(RegCond == "(wet & awake)"),
    assertion(CVars == ["wet", "awake"]),
    get_dict(component_name, Comp, CompName),
    assertion(CompName == "frog"),
    get_dict(timing, Timing, Tmng),
    assertion(Tmng == "always"),
    get_dict(response, Responses, Rspns),
    get_dict(post_condition, Responses, PostCond),
    assertion(Rspns == "satisfaction"),
    assertion(PostCond == "((noise = croaking))"),
    assertion(RespVars == [ "noise", "croaking" ]).
